name: PowerBI-CICD-$(Date:yyyyMMdd)$(Rev:.r)

# Define triggers
trigger:
  branches:
    include:
      - main
  paths:
    include:
      - '**/*.Report/**'
      - '**/*.SemanticModel/**'

pr:
  branches:
    include:
      - main
  paths:
    include:
      - '**/*.Report/**'
      - '**/*.SemanticModel/**'

# Manual trigger with input for deployment workspace (similar to workflow_dispatch)
# The manual trigger can also be configured in the Azure DevOps UI
variables:
- group: PowerBIDevelopmentVariables # Link your variable group for credentials

pool:
  name: Default

stages:
  - stage: Build
    displayName: 'Build and BPA Checks'
    jobs:
      - job: BPA_SemanticModels
        displayName: 'BPA Semantic Models'
        # If using a self-hosted agent, ensure PowerShell is available.
        # If using a Microsoft-hosted agent, specify vmImage: 'windows-latest'
        pool:
          name: Default
        steps:
          - checkout: self # Checks out the repository code

          - task: PowerShell@2
            displayName: 'Run BPA on Semantic Models'
            inputs:
              targetType: inline
              # Assuming .bpa/bpa.ps1 is relative to your repo root
              script: |
                # Ensure the script is executable or specify full path
                $scriptPath = "$(Build.SourcesDirectory)\.bpa\bpa.ps1"
                $srcPath = "$(Build.SourcesDirectory)\src" # Assuming your PBIP components are in a 'src' folder

                # Correctly pass array arguments to PowerShell script
                & "$scriptPath" -src @("$srcPath\*.SemanticModel")

      - job: BPA_Reports
        displayName: 'BPA Reports'
        pool:
          name: Default
        steps:
          - checkout: self

          - task: PowerShell@2
            displayName: 'Run BPA on Reports'
            inputs:
              targetType: inline
              script: |
                $scriptPath = "$(Build.SourcesDirectory)\.bpa\bpa.ps1"
                $srcPath = "$(Build.SourcesDirectory)\src" # Assuming your PBIP components are in a 'src' folder

                & "$scriptPath" -src @("$srcPath\*.Report")

  - stage: Deploy_UAT
    displayName: 'Deploy to UAT'
    dependsOn: Build # Ensures this stage only runs if Build stage succeeds
    condition: succeeded() # Also ensures it runs only if Build succeeds
    jobs:
      - deployment: DeployFabricItems
        displayName: 'Deploy Fabric Items'
        environment: 'ContosoUAT' # Link to your Azure DevOps environment for security/approvals
        # If using a self-hosted agent, ensure Python is installed or use UsePythonVersion.
        # If using a Microsoft-hosted agent, specify vmImage: 'ubuntu-latest' or 'windows-latest'
        pool:
          name: Default # Or vmImage: 'ubuntu-latest'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self # Checks out the repository code again for the deploy script

                ## I'm using a self-hosted agent with Python installed hence I commented this out. It's only useful for Microsoft-hosted agents.

                # - task: UsePythonVersion@0
                #   displayName: 'Use Python 3.x'
                #   inputs:
                #     versionSpec: '3.x' # Use a specific version like '3.9' or '3.12'

                - script: |
                    "C:\Program Files\Python312\python.exe" --version
                    "C:\Program Files\Python312\python.exe" -m pip install azure-identity fabric-cicd
                    echo "Build.SourcesDirectory: $(Build.SourcesDirectory)"  # Debugging what the agent sees
                    dir "$(Build.SourcesDirectory)"  # Debugging the directory structure
                  displayName: 'Install Python Packages'

                - task: PythonScript@0
                  displayName: 'Run Deployment Script'
                  inputs:
                    scriptSource: 'filePath'
                    filePath: 'deploy.py' # Assuming deploy.py is in your repo root
                    arguments: > # Arguments for your deploy.py script
                      --spn-auth
                      --workspace "$(uat_workspace_name)"
                      --src "$(Build.SourcesDirectory)/src"
                  env:
                    FABRIC_CLIENT_ID: $(powerbi_client_id)
                    FABRIC_CLIENT_SECRET: $(powerbi_client_secret) # Securely passed
                    FABRIC_TENANT_ID: $(tenant_id)